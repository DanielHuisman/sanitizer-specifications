/* SFAs */

test1 = length ("=", 10)
test2 = length (">", 3) and length ("<", 9)
test3 = test1 or test2
test4 = test1 plus test2
test5 = not length ("=", 10)

export test1
export test2
export test3
export test4
accepts test1 "0123456789"
rejects test1 "123456789"
rejects test1 "01234567890"
accepts test2 "def\"\\fed"
accepts test3 "1234"
rejects test4 "abc"

test1_alt = length-list [[
    (">", 9),
    ("<", 11)
]]
test2_alt = length-list [[
    (">=", 4),
    ("<=", 8)
]]
test3_alt = test1_alt or test2_alt
test4_alt = length-list [[
    (">=", 14),
    ("<=", 18)
]]

export test1_alt
export test2_alt
export test3_alt
export test4_alt
accepts test1_alt "0123456789"
rejects test1_alt "123456789"
rejects test1_alt "01234567890"
accepts test2_alt "def\"\\fed"
accepts test3_alt "1234"
rejects test4_alt "abc"

whitelist = word-list ("contains", [
    "abc",
    "def",
    "\"test\""
])
blacklist = word ("not_equals", "abc") and word ("not_equals", "def")

export whitelist
accepts whitelist "testabctest"
accepts whitelist "\"test\""
rejects whitelist "testtest"

export blacklist
accepts blacklist "qed"
rejects blacklist "abc"
rejects blacklist "def"

range1 = range-list [
    (('A', 'Z'), 3),
    ('-', 1),
    (('0', '9'), 3)
]

export range1
accepts range1 "ABC-123"
rejects range1 "abc-123"

regex1 = regex r/[a-z]+0?/r
export regex1
accepts regex1 "abc"
accepts regex1 "abc0"
rejects regex1 "0"
rejects regex1 "AB"

regex2 = regex r/[a-zA-Z0-9._%\+\-]+@[a-zA-Z0-9.\-]+\.[a-zA-Z]{2,63}/r
accepts regex2 "daniel@huisman.me"
accepts regex2 "da+test@test.nl"
rejects regex2 "danielhuisman.me"
rejects regex2 "da@test"

/* SFTs */

cheese = constant "cheese"
export cheese
outputs cheese "test" "cheese"

trim = trim 4

export trim
accepts trim ""
accepts trim "abcd"
accepts trim "abcdef"

pad1 = pad (5, "012", false)
export pad1
outputs pad1 "" "01201"
outputs pad1 "a" "a0120"
outputs pad1 "abc" "abc01"
outputs pad1 "abcde" "abcde"
outputs pad1 "abcdefg" "abcdefg"

pad2 = pad (3, " ", true)
export pad2
outputs pad2 "" "   "
outputs pad2 "a" "a  "
outputs pad2 "aaaaa" "aaa"

swap_ab = replace-char [
    ('a', "b"),
    ('b', "a")
]

export swap_ab
outputs swap_ab "abc" "bac"

html_entities = replace-char [
    ('&', "&amp;"),
    ('<', "&lt;"),
    ('>', "&gt;")
]

export html_entities
outputs html_entities "<script>" "&lt;script&gt;"
outputs html_entities "&amp;" "&amp;amp;"

abc_to_def = replace-word ("abc", "def")
export abc_to_def
outputs abc_to_def "abc1" "def1"
outputs abc_to_def "abcabc" "defdef"
outputs abc_to_def "ababc" "abdef"

html_amp = replace-word ("&amp;", "")
export html_amp
outputs html_amp "abc" "abc"
outputs html_amp "&amp;" ""
outputs html_amp "&amp " "&amp "
outputs html_amp "&amp;abc&amp;2" "abc2"

// Unfortunately this way of replacing words does not support partial matches at the end
// outputs html_amp "&amp;z&amp" "z&amp"
outputs html_amp "&amp;z&amp" "z"

trim_3_no_a = replace-char [('a', "")] and trim 3
export trim_3_no_a
outputs trim_3_no_a "abcde" "bcd"
outputs trim_3_no_a "aaaaa" ""
outputs trim_3_no_a "aaabb" "bb"

no_a_trim_3 =  trim 3 and replace-char [('a', "")]
export no_a_trim_3
outputs no_a_trim_3 "abcde" "bc"
outputs trim_3_no_a "aaaaa" ""
outputs no_a_trim_3 "aaabb" ""
